{"version":3,"sources":["components/Button.tsx","components/Choice.tsx","components/Field.tsx","components/ListEntry.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Button","children","onClick","Choice","a","b","prefer","name","Field","value","onChange","e","currentTarget","ListEntry","items","setItems","fields","useState","curr","setCurr","id","Math","floor","random","map","key","filter","findPref","item","prefs","find","App","undefined","query","setQuery","setPrefs","trySort","qs","sort","prefA","prefB","better","push","length","className","newPrefs","pref","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1cff0971.chunk.js","sourcesContent":["import React from 'react';\r\n\r\ninterface ButtonProps {\r\n  onClick: () => void;\r\n  children: React.ReactNode;\r\n}\r\n\r\nconst Button = ({ children, onClick }: ButtonProps) => {\r\n  return (\r\n    <button onClick={onClick}>\r\n      { children }\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default Button;\r\n","import React from 'react';\r\n\r\nimport Button from './Button';\r\nimport { Item } from './ListEntry';\r\n\r\nexport interface Query {\r\n  a: Item;\r\n  b: Item;\r\n}\r\n\r\ninterface ChoiceProps {\r\n  prefer: (a: Item, b: Item) => void;\r\n}\r\n\r\nconst Choice = ({ a, b, prefer }: Query & ChoiceProps) => {\r\n  return (\r\n    <div>\r\n      <p>{ a.name }<Button onClick={() => prefer(a, b)}>Prefer this</Button></p>\r\n      <p>{ b.name }<Button onClick={() => prefer(b, a)}>Prefer this</Button></p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Choice;\r\n","import React from 'react';\r\n\r\ninterface FieldProps {\r\n  value: string;\r\n  onChange: (s: string) => void;\r\n}\r\n\r\nconst Field = ({ value, onChange }: FieldProps) => {\r\n  const update = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    onChange(e.currentTarget.value);\r\n  }\r\n\r\n  return (\r\n    <input value={value} onChange={update} />\r\n  );\r\n}\r\n\r\nexport default Field;\r\n","import React, { useState } from 'react';\r\n\r\nimport Button from './Button';\r\nimport Field from './Field';\r\n\r\nexport interface Item {\r\n  id: number;\r\n  name: string;\r\n}\r\n\r\nconst id = () => {\r\n  return Math.floor(Math.random() * 1000000);\r\n}\r\n\r\ninterface ListEntryProps {\r\n  items: Item[];\r\n  setItems: (l: Item[]) => void;\r\n  fields?: React.ReactNode;\r\n}\r\n\r\nconst ListEntry = ({ items, setItems, fields }: ListEntryProps) => {\r\n  const [curr, setCurr] = useState('');\r\n\r\n  return (\r\n    <div>\r\n      <Field value={curr} onChange={setCurr} />\r\n      <Button onClick={() => {\r\n        setItems([...items, { id: id(), name: curr }]);\r\n        setCurr('');\r\n      }}>\r\n        Add item\r\n      </Button>\r\n      { fields }\r\n      <table>\r\n        <tbody>\r\n          {items.map(({ id, name }) => (\r\n            <tr key={id}>\r\n              <td>\r\n                { name }\r\n              </td>\r\n              <td>\r\n                <Button onClick={() => setItems(items.filter(({ id: id2 }) => id2 !== id))}>\r\n                  x\r\n                </Button>\r\n              </td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ListEntry;\r\n","import React, { useState } from 'react';\nimport './App.css';\n\nimport Choice, { Query } from './components/Choice';\nimport ListEntry, { Item } from './components/ListEntry';\nimport Button from './components/Button';\n\ninterface Preference {\n  key: number;\n  better: number[];\n}\n\ntype Maybe<x> = x | undefined;\n\nconst findPref = (item: Item, prefs: Preference[]) => {\n  return prefs.find(({ key }) => key === item.id);\n}\n\nconst App = () => {\n  const [items, setItems] = useState([{ name: 'a', id: 1 }, { name: 'b', id: 2 }, { name: 'c', id: 3 }, { name: 'd', id: 4 }, { name: 'e', id: 5 }] as Item[]);\n  const [query, setQuery] = useState(undefined as Maybe<Query>);\n  const [prefs, setPrefs] = useState([] as Preference[]);\n\n  // A better than B\n  const prefer = (a: Item, b: Item) => {\n    const pref: Preference | undefined = findPref(b, prefs);\n    let newPrefs;\n    if (!pref) {\n      newPrefs = [\n        ...prefs,\n        { key: b.id, better: [a.id] }\n      ];\n    } else {\n      newPrefs = [\n        ...prefs.filter(({ key }) => key !== pref.key),\n        { key: pref.key, better: [...pref.better, a.id] }\n      ];\n    }\n    setPrefs(newPrefs);\n    trySort(newPrefs);\n  };\n\n  const trySort = (prefs: Preference[]) => {\n    const qs: Query[] = [];\n    items.sort((a: Item, b: Item) => {\n      const prefA: Maybe<Preference> = findPref(a, prefs);\n      const prefB: Maybe<Preference> = findPref(b, prefs);\n      // B better than A\n      if (prefA && prefA.better.find(id => id === b.id)) {\n        return 1;\n      }\n      // A better than B\n      else if (prefB && prefB.better.find(id => id === a.id)) {\n        return -1;\n      }\n      // No sort info found\n      else {\n        qs.push({ a, b });\n        return -1;\n      }\n    });\n    if (qs.length === 0) {\n      setQuery(undefined);\n    } else {\n      setQuery(qs[Math.floor(Math.random() * qs.length)]);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Human Sorting</h1>\n        <p>Got a list of things you want sorted but don't want to figure out yourself how to sort it yourself?</p>\n        {query ? (\n          <Choice {...query} prefer={prefer} />\n        ) : (\n          <ListEntry\n            items={items}\n            setItems={setItems}\n            fields={<Button onClick={() => trySort(prefs)}>Sort</Button>}\n          />\n        )}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}